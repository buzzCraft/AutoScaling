---
stages:
  - cleanup
  - build
  - deploy
cleanup:
  stage: cleanup
  script:
    # Stop and remove any containers with names starting with 'scaler-w1-'
    - if [ $(docker ps -a | grep 'scaler-w1-' | wc -l) -gt 0 ]; then docker ps -a | grep 'scaler-w1-' | awk '{print $1}' | xargs docker stop; fi
    - if [ $(docker ps -a | grep 'scaler-w1-' | wc -l) -gt 0 ]; then docker ps -a | grep 'scaler-w1-' | awk '{print $1}' | xargs docker rm; fi

    # Remove images with names starting with 'scaler' or 'openstack-exporter'
    - if [ $(docker images | grep 'scaler' | wc -l) -gt 0 ]; then docker images | grep 'scaler' | awk '{print $3}' | xargs docker rmi; fi
    - if [ $(docker images | grep 'openstack-exporter' | wc -l) -gt 0 ]; then docker images | grep 'openstack-exporter' | awk '{print $3}' | xargs docker rmi; fi


scaler_build:
  stage: build
  script:
    - echo "Stage build, Dockerfile:"
    - cd apps/OpenStack
    - cat Dockerfile
    - docker build -t scaler:$CI_PIPELINE_ID .
openstack_exporter_build:
  stage: build
  script:
    - echo "Stage build, Dockerfile:"
    - cd apps/OpenStack
    - cat Dockerfile
    - docker build -t openstack-exporter:$CI_PIPELINE_ID .
container_deploy1:
  stage: deploy
  script:
    - docker run -d -p 7474:7474 --restart=unless-stopped -e OS_AUTH_URL="$OS_AUTH_URL" -e OS_PROJECT_NAME="$OS_PROJECT_NAME" -e OS_USERNAME="$OS_USERNAME" -e OS_PASSWORD="$OS_PASSWORD" --name scaler-w1-$CI_PIPELINE_ID scaler:$CI_PIPELINE_ID



openstack_exporter_deploy:
  stage: deploy
  script:
    - docker images | grep openstack-exporter
    - docker run -d -p 5000:5000 --restart=unless-stopped -e OS_AUTH_URL=$OS_AUTH_URL -e OS_PROJECT_NAME=$OS_PROJECT_NAME -e OS_USERNAME=$OS_USERNAME -e OS_PASSWORD="$OS_PASSWORD" --name openstack-exporter-$CI_PIPELINE_ID openstack-exporter:$CI_PIPELINE_ID
    - docker ps





