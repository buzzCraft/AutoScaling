---
stages:
  - cleanup
  - build
  - deploy
cleanup:
  stage: cleanup
  script:
    # Stop any containers with names starting with 'scaler-w1-'
    - docker ps -aq --filter "name=scaler-w1-" | xargs -r docker stop || echo "Failed to stop some containers."
    - docker ps -aq --filter "name=openstack-exporter-" | xargs -r docker stop || echo "Failed to stop some containers."
  # Wait for a few seconds to ensure everything is settled
    - sleep 10
    - docker ps -aq --filter "name=openstack-exporter-" | xargs -r docker rm || echo "Failed to remove some containers."
    - docker ps -aq --filter "name=scaler-w1-" | xargs -r docker rm || echo "Failed to remove some containers."

  

    # Remove images with names containing 'scaler' or 'openstack-exporter'
    - docker images -q | grep 'scaler' | xargs -r docker rmi || echo "Failed to remove some scaler images."
    - docker images -q | grep 'openstack-exporter' | xargs -r docker rmi || echo "Failed to remove some openstack-exporter images."



scaler_build:
  stage: build
  script:
    - echo "Stage build, Dockerfile:"
    - cd apps/Scaling
    - cat Dockerfile
    - docker build -t scaler:$CI_PIPELINE_ID .
openstack_exporter_build:
  stage: build
  script:
    - echo "Stage build, Dockerfile:"
    - cd apps/OpenStack
    - cat Dockerfile
    - docker build -t openstack-exporter:$CI_PIPELINE_ID .

create_network:
  stage: deploy
  script:
    # Create a custom network; if it already exists, this command will do nothing
    - docker network create scaler_net || true

openstack_exporter_deploy:
  stage: deploy
  script:
    # Ensure the custom network is created
    - docker network create scaler_net || true
    # Now run the container and attach it to the network
    - docker run -d -p 5000:5000 --restart=unless-stopped --network scaler_net -e OS_AUTH_URL=$OS_AUTH_URL -e OS_PROJECT_NAME=$OS_PROJECT_NAME -e OS_USERNAME=$OS_USERNAME -e OS_PASSWORD="$OS_PASSWORD" --name openstack-exporter-$CI_PIPELINE_ID openstack-exporter:$CI_PIPELINE_ID
    - docker ps

scaler_deploy:
  stage: deploy
  script:
    # Ensure the custom network is created
    - docker network create scaler_net || true
    # Now run the container and attach it to the network
    - docker run -d -p 7474:7474 --restart=unless-stopped --network scaler_net -e OS_AUTH_URL="$OS_AUTH_URL" -e OS_PROJECT_NAME="$OS_PROJECT_NAME" -e OS_USERNAME="$OS_USERNAME" -e OS_PASSWORD="$OS_PASSWORD" --name scaler-w1-$CI_PIPELINE_ID scaler:$CI_PIPELINE_ID
    - docker ps






